import { PrismaClient } from "@prisma/client";

const globalForPrisma = globalThis;

if (!globalForPrisma.prisma) {
  globalForPrisma.prisma = new PrismaClient({
    log: ["query", "info", "warn", "error"], // üîç Logs detallados para depuraci√≥n
    datasources: {
      db: {
        url: process.env.DATABASE_URL,
      },
    },
  });
}

const prisma = globalForPrisma.prisma;

// üî• Funci√≥n para cerrar conexiones inactivas
async function disconnectPrisma() {
  try {
    await prisma.$disconnect();
    console.log("üõë Prisma desconectado.");
  } catch (error) {
    console.error("‚ö†Ô∏è Error al desconectar Prisma:", error);
  }
}

// üõ† Manejo de eventos para cerrar Prisma al terminar procesos
process.on("beforeExit", disconnectPrisma);
process.on("SIGINT", disconnectPrisma);
process.on("SIGTERM", disconnectPrisma);

export { prisma };
