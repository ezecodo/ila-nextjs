generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Article {
  id               Int             @id @default(autoincrement())
  title            String          // Título del artículo
  subtitle         String?         // Subtítulo del artículo
  content          String          @db.LongText
  previewText      String?         @db.LongText
  additionalInfo   String? 
  beitragstypId    Int             // Relación con el tipo de artículo
  beitragssubtypId Int?            // Relación opcional con el subtipo
  editionId        Int?            // Relación opcional con la edición de la revista
  isInPrintEdition Boolean         @default(false) // Si aparece en versión impresa
  startPage        Int?            // Página donde comienza el artículo en la revista
  endPage          Int?            // Página donde termina el artículo en la revista
  createdAt        DateTime        @default(now())      // Fecha de creación
  updatedAt        DateTime        @updatedAt           // Fecha de actualización automática
  articleImage     String?          
  authors          Author[]   @relation("ArticleAuthors") // Relación muchos a muchos

  beitragstyp      Beitragstyp     @relation(fields: [beitragstypId], references: [id])
  beitragssubtyp   Beitragssubtyp? @relation(fields: [beitragssubtypId], references: [id])
  edition          Edition?        @relation(fields: [editionId], references: [id]) // Relación con Edition
  favorites        Favorite[]      // Relación con favoritos
  
  interviewees     Interviewee[]   @relation("ArticleInterviewees") // Relación muchos a muchos con entrevistados
  isPublished      Boolean   @default(false) // Publicado o no
  publicationDate  DateTime?                 // Fecha programada para publicación
  obituaryDetails  ObituaryDetails?  
  articleCategories ArticleCategory[] // Relación con categorías
   regions   Region[]   @relation("ArticleRegions") // Relación con regiones
   topics    Topic[]    @relation("ArticleTopics")
   bookImage         String?   // Imagen del libro (para Buchbesprechung)
  mediaTitle        String?   // Título completo del libro
 


  @@index([beitragssubtypId], map: "Article_beitragssubtypId_fkey")
  @@index([beitragstypId], map: "Article_beitragstypId_fkey")
  @@index([editionId], map: "Article_editionId_fkey") // Índice para la edición
}

model Interviewee {
  id         Int        @id @default(autoincrement())
  name       String     @unique // Garantiza que el nombre sea único
  articles   Article[]  @relation("ArticleInterviewees") // Relación con artículos
 

}



model Edition {
  id                Int              @id @default(autoincrement())
  number            Int              @unique // Número único de la edición
  title             String           // Título de la edición
  articles          Article[]        // Relación con artículos
  createdAt         DateTime         @default(now()) // Fecha de creación
  subtitle          String?          // Subtítulo de la edición (opcional)
  summary           String           @db.Text // Resumen de la edición (obligatorio)
  tableOfContents   String?          @db.Text // Tabla de contenido como texto (opcional)
  isCurrent         Boolean          @default(false) // Indica si es la edición actual
  datePublished     DateTime         @default(now()) // Fecha de publicación
  coverImage        String?          // Imagen de portada
  backgroundImage   String?          // Imagen de fondo de portada
  isAvailableToOrder Boolean?         // Disponible para Ordenar?
  regions   Region[]   @relation("EditionRegions")
  topics    Topic[]    @relation("EditionTopics")
  
}


model Beitragstyp {
  id       Int              @id @default(autoincrement())
  name     String           @unique
  articles Article[]
  subtypes Beitragssubtyp[]
}

model Region {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  parentId  Int?      // Relación jerárquica
  parent    Region?   @relation("RegionHierarchy", fields: [parentId], references: [id])
  children  Region[]  @relation("RegionHierarchy")
  editions  Edition[] @relation("EditionRegions")
  articles  Article[] @relation("ArticleRegions") // Relación con artículos
   authors   Author[]  @relation("AuthorRegions")   // Relación con autores
}

model Topic {
  id              Int         @id @default(autoincrement())
  name            String     @unique
  parentId        Int?
  parent          Topic?      @relation("TopicHierarchy", fields: [parentId], references: [id])
  children        Topic[]     @relation("TopicHierarchy")
  editions        Edition[]   @relation("EditionTopics")
  articles        Article[]   @relation("ArticleTopics") // Relación con artículos
   authors   Author[]  @relation("AuthorTopics")    // Relación con autores
}

model Beitragssubtyp {
  id            Int          @id @default(autoincrement())
  name          String
  beitragstypId Int
  beitragstyp   Beitragstyp  @relation(fields: [beitragstypId], references: [id])
  articles      Article[]

  @@unique([name, beitragstypId]) // Índice compuesto
}

model User {
  id         Int        @id @default(autoincrement())
  email      String     @unique // Correo único para cada usuario
  name       String?    // Nombre opcional
  favorites  Favorite[] // Relación con favoritos
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int      // Usuario que favoritiza el artículo
  articleId Int      // Artículo que se favoritiza
  user      User     @relation(fields: [userId], references: [id])
  article   Article  @relation(fields: [articleId], references: [id])
  createdAt DateTime @default(now()) // Fecha de creación del favorito

  @@unique([userId, articleId], map: "UniqueUserArticle") // Garantiza que un usuario no pueda repetir un favorito
}

model Author {
 id        Int       @id // Usaremos el `Beitrags-ID` como ID primario
  name      String    // Nombre del autor
  email     String?   @unique // Email opcional, único para evitar duplicados
  location  String?   // Ort (lugar asociado al autor, opcional)
  role      String    // Personenkategorie (Categoría: Autor*in, Redaktionsmitglied, etc.)
  bio       String?   // Textkörper (Descripción o biografía del autor)
  createdAt DateTime  @default(now()) // Fecha de creación
  updatedAt DateTime  @updatedAt      // Fecha de última actualización
  articles  Article[]  @relation("ArticleAuthors") // Relación muchos a muchos

  regions   Region[]  @relation("AuthorRegions") // Relación muchos a muchos con regiones
  topics    Topic[]   @relation("AuthorTopics")  // Relación muchos a muchos con temas
  
}

model ObituaryDetails {
  id               Int      @id @default(autoincrement())
  articleId        Int      @unique // Relación uno a uno con Article
  deceasedFirstName String   // Nombre de la persona fallecida
  deceasedLastName  String   // Apellido de la persona fallecida
  dateOfBirth       Int // Fecha de nacimiento
  dateOfDeath       Int // Fecha de defunción

  article          Article  @relation(fields: [articleId], references: [id])
}

model Category {
  id               Int           @id @default(autoincrement())
  name             String        @unique
  articleCategories ArticleCategory[] // Relación con artículos
}

model ArticleCategory {
  articleId Int
  categoryId Int
  article   Article @relation(fields: [articleId], references: [id])
  category  Category @relation(fields: [categoryId], references: [id])

  @@id([articleId, categoryId]) // Índice compuesto para garantizar unicidad
}











///////////////////////////////////


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Article {
  id                Int               @id @default(autoincrement())
  title             String
  content           String            @db.LongText
  beitragstypId     Int
  beitragssubtypId  Int?
  editionId         Int?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  isInPrintEdition  Boolean           @default(false)
  endPage           Int?
  startPage         Int?
  subtitle          String?
  isPublished       Boolean           @default(false)
  publicationDate   DateTime?
  previewText       String?           @db.LongText
  additionalInfo    String?
  bookImage         String?
  mediaTitle        String?
  articleImage      String?
  beitragssubtyp    Beitragssubtyp?   @relation(fields: [beitragssubtypId], references: [id])
  beitragstyp       Beitragstyp       @relation(fields: [beitragstypId], references: [id])
  edition           Edition?          @relation(fields: [editionId], references: [id])
  articleCategories ArticleCategory[]
  favorites         Favorite[]
  obituaryDetails   ObituaryDetails?
  authors           Author[]          @relation("ArticleAuthors")
  interviewees      Interviewee[]     @relation("ArticleInterviewees")
  regions           Region[]          @relation("ArticleRegions")
  topics            Topic[]           @relation("ArticleTopics")
  

  @@index([beitragssubtypId], map: "Article_beitragssubtypId_fkey")
  @@index([beitragstypId], map: "Article_beitragstypId_fkey")
  @@index([editionId], map: "Article_editionId_fkey")
}

model Interviewee {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  articles Article[] @relation("ArticleInterviewees")
}

model Edition {
  id                 Int       @id @default(autoincrement())
  number             Int       @unique
  title              String
  createdAt          DateTime  @default(now())
  datePublished      DateTime  @default(now())
  subtitle           String?
  summary            String    @db.Text
  isCurrent          Boolean   @default(false)
  tableOfContents    String?   @db.Text
  backgroundImage    String?
  coverImage         String?
  isAvailableToOrder Boolean?
  articles           Article[]
  regions            Region[]  @relation("EditionRegions")
  topics             Topic[]   @relation("EditionTopics")
}

model Beitragstyp {
  id       Int              @id @default(autoincrement())
  name     String           @unique
  articles Article[]
  subtypes Beitragssubtyp[]
}

model Region {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  parentId Int?
  parent   Region?   @relation("RegionHierarchy", fields: [parentId], references: [id])
  children Region[]  @relation("RegionHierarchy")
  articles Article[] @relation("ArticleRegions")
  editions Edition[] @relation("EditionRegions")
  authors    Author[]  @relation("AuthorRegions")   // Relación con autores

  @@index([parentId], map: "Region_parentId_fkey")
}

model Topic {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  parentId Int?
  parent   Topic?    @relation("TopicHierarchy", fields: [parentId], references: [id])
  children Topic[]   @relation("TopicHierarchy")
  articles Article[] @relation("ArticleTopics")
  editions Edition[] @relation("EditionTopics")
  authors    Author[]  @relation("AuthorTopics")   // Relación con autores

  @@index([parentId], map: "Topic_parentId_fkey")
}

model Beitragssubtyp {
  id            Int         @id @default(autoincrement())
  name          String
  beitragstypId Int
  articles      Article[]
  beitragstyp   Beitragstyp @relation(fields: [beitragstypId], references: [id])

  @@unique([name, beitragstypId])
  @@index([beitragstypId], map: "Beitragssubtyp_beitragstypId_fkey")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  name      String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  favorites Favorite[]
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  articleId Int
  createdAt DateTime @default(now())
  article   Article  @relation(fields: [articleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, articleId], map: "UniqueUserArticle")
  @@index([articleId], map: "Favorite_articleId_fkey")
}

model Author {
  id        Int       @id
  name      String
  email     String?   @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bio       String?
  location  String?
  role      String
  articles  Article[] @relation("ArticleAuthors")
  personCategoryId Int?            // FK hacia PersonCategory
  personCategory   PersonCategory? @relation("AuthorPersonCategory", fields: [personCategoryId], references: [id]) // Relación con PersonCategory
  regions         Region[]        @relation("AuthorRegions") // Relación con regiones
  topics          Topic[]         @relation("AuthorTopics") // Relación con temas
}
model PersonCategory {
  id       Int      @id @default(autoincrement())
  name     String   @unique // Nombre único para cada categoría
  authors  Author[] @relation("AuthorPersonCategory") // Relación con autores

  @@map("PersonCategory") // Aseguramos el mapeo a la tabla correcta
}

model ObituaryDetails {
  id                Int     @id @default(autoincrement())
  articleId         Int     @unique
  deceasedFirstName String
  deceasedLastName  String
  dateOfBirth       Int
  dateOfDeath       Int
  article           Article @relation(fields: [articleId], references: [id])
}

model Category {
  id                Int               @id @default(autoincrement())
  name              String            @unique
  articleCategories ArticleCategory[]
}

model ArticleCategory {
  articleId  Int
  categoryId Int
  article    Article  @relation(fields: [articleId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([articleId, categoryId])
  @@index([categoryId], map: "ArticleCategory_categoryId_fkey")
}
