generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Article {
  id               Int              @id @default(autoincrement())
  title            String
  content          String           @db.LongText
  beitragstypId    Int
  beitragssubtypId Int?
  editionId        Int?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  isInPrintEdition Boolean          @default(false)
  endPage          Int?
  startPage        Int?
  subtitle         String?
  isPublished      Boolean          @default(false)
  publicationDate  DateTime?
  previewText      String?          @db.LongText
  additionalInfo   String?          @db.Text
  bookImage        String?
  mediaTitle       String?          @db.Text
  articleImage     String?          @db.Text
  beitragsId       Int?
  isTranslatedES   Boolean          @default(false)
  additionalInfoES String?          @db.Text
  contentES        String?          @db.LongText
  previewTextES    String?          @db.LongText
  titleES          String?
  subtitleES       String?
  needsReviewES    Boolean          @default(false)
  legacyPath       String?          @unique
  activityLogs     ActivityLog[]
  beitragssubtyp   Beitragssubtyp?  @relation(fields: [beitragssubtypId], references: [id])
  beitragstyp      Beitragstyp      @relation(fields: [beitragstypId], references: [id])
  edition          Edition?         @relation(fields: [editionId], references: [id])
  favorites        Favorite[]
  obituaryDetails  ObituaryDetails?
  authors          Author[]         @relation("ArticleAuthors")
  categories       Category[]       @relation("ArticleCategories")
  interviewees     Interviewee[]    @relation("ArticleInterviewees")
  regions          Region[]         @relation("ArticleRegions")
  topics           Topic[]          @relation("ArticleTopics")

  @@index([beitragssubtypId], map: "Article_beitragssubtypId_fkey")
  @@index([beitragstypId], map: "Article_beitragstypId_fkey")
  @@index([editionId], map: "Article_editionId_fkey")
}

model Interviewee {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  articles Article[] @relation("ArticleInterviewees")
}

model Edition {
  id                 Int       @id @default(autoincrement())
  number             Int       @unique
  title              String
  createdAt          DateTime  @default(now())
  datePublished      DateTime  @default(now())
  subtitle           String?
  summary            String    @db.Text
  isCurrent          Boolean   @default(false)
  tableOfContents    String?   @db.Text
  backgroundImage    String?
  coverImage         String?
  isAvailableToOrder Boolean?
  drupalId           Int?
  titleES            String?
  articles           Article[]
  regions            Region[]  @relation("EditionRegions")
  topics             Topic[]   @relation("EditionTopics")
}

model Beitragstyp {
  id        Int              @id @default(autoincrement())
  name      String           @unique
  nameES    String?
  articles  Article[]
  subtypes  Beitragssubtyp[]
  carousels Carousel[]
}

model Region {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  parentId  Int?
  nameES    String?
  carousels Carousel[]
  parent    Region?    @relation("RegionHierarchy", fields: [parentId], references: [id])
  children  Region[]   @relation("RegionHierarchy")
  articles  Article[]  @relation("ArticleRegions")
  authors   Author[]   @relation("AuthorRegions")
  editions  Edition[]  @relation("EditionRegions")

  @@index([parentId], map: "Region_parentId_fkey")
}

model Topic {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  parentId Int?
  nameES   String?
  parent   Topic?    @relation("TopicHierarchy", fields: [parentId], references: [id])
  children Topic[]   @relation("TopicHierarchy")
  articles Article[] @relation("ArticleTopics")
  authors  Author[]  @relation("AuthorTopics")
  editions Edition[] @relation("EditionTopics")

  @@index([parentId], map: "Topic_parentId_fkey")
}

model Beitragssubtyp {
  id            Int         @id @default(autoincrement())
  name          String
  beitragstypId Int
  articles      Article[]
  beitragstyp   Beitragstyp @relation(fields: [beitragstypId], references: [id])

  @@unique([name, beitragstypId])
  @@index([beitragstypId], map: "Beitragssubtyp_beitragstypId_fkey")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  username      String?       @unique
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  password      String
  role          String        @default("user")
  language      String        @default("de")
  accounts      Account?
  activityLogs  ActivityLog[]
  favorites     Favorite[]
  sessions      Session[]
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String   @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model InvitationToken {
  id        String   @id @default(cuid())
  email     String   @unique
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
}

model Author {
  id               Int             @id @default(autoincrement())
  name             String          @unique(map: "name")
  email            String?         @unique
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  bio              String?         @db.Text
  location         String?
  role             String?
  personCategoryId Int?
  drupalId         Int?            @unique
  personCategory   PersonCategory? @relation("AuthorPersonCategory", fields: [personCategoryId], references: [id])
  articles         Article[]       @relation("ArticleAuthors")
  regions          Region[]        @relation("AuthorRegions")
  topics           Topic[]         @relation("AuthorTopics")

  @@index([personCategoryId], map: "Author_personCategoryId_fkey")
}

model PersonCategory {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  authors Author[] @relation("AuthorPersonCategory")

  @@map("PersonCategory")
}

model ObituaryDetails {
  id                Int     @id @default(autoincrement())
  articleId         Int     @unique
  deceasedFirstName String
  deceasedLastName  String
  dateOfBirth       Int
  dateOfDeath       Int
  notes             String?
  article           Article @relation(fields: [articleId], references: [id])
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  nameES    String?
  articles  Article[]  @relation("ArticleCategories")
  carousels Carousel[] @relation("CarouselCategories")
}

model Image {
  id          Int      @id @default(autoincrement())
  contentType String
  contentId   Int
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  alt         String?
  title       String?  @db.VarChar(750)
  height      Int?
  width       Int?

  @@index([contentType, contentId])
}

model Favorite {
  id        Int     @id @default(autoincrement())
  userId    String
  articleId Int
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId])
  @@index([articleId], map: "Favorite_articleId_fkey")
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String
  date        DateTime
  location    String
  image       String
  createdAt   DateTime @default(now())
}

model ActivityLog {
  id         Int            @id @default(autoincrement())
  userId     String
  articleId  Int?
  action     ActivityAction
  createdAt  DateTime       @default(now())
  carouselId String?
  metadata   String?        @db.LongText
  article    Article?       @relation(fields: [articleId], references: [id])
  carousel   Carousel?      @relation("CarouselToActivityLogs", fields: [carouselId], references: [id])
  user       User           @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([articleId])
  @@index([carouselId])
}

model Carousel {
  id            String        @id @default(cuid())
  beitragstypId Int?
  topic         String?
  limit         Int           @default(10)
  orderBy       String        @default("date_desc")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  titleDE       String?
  titleES       String?
  regionId      Int?
  position      Int           @default(0)
  activityLogs  ActivityLog[] @relation("CarouselToActivityLogs")
  beitragstyp   Beitragstyp?  @relation(fields: [beitragstypId], references: [id])
  region        Region?       @relation(fields: [regionId], references: [id])
  categories    Category[]    @relation("CarouselCategories")

  @@index([beitragstypId], map: "Carousel_beitragstypId_fkey")
  @@index([regionId], map: "Carousel_regionId_fkey")
}

enum ActivityAction {
  TRANSLATE_ARTICLE
  CREATE_ARTICLE
  UPDATE_ARTICLE
  DELETE_ARTICLE
  CREATE_EDITION
  CREATE_EVENT
  REVIEW_TRANSLATION
  CREATE_CAROUSEL
  DELETE_CAROUSEL
}
