generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Article {
  id                Int               @id @default(autoincrement())
  beitragsId        Int?              // ID original de Drupal
  title             String
  content           String            @db.LongText
  beitragstypId     Int
  beitragssubtypId  Int?
  editionId         Int?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  isInPrintEdition  Boolean           @default(false)
  endPage           Int?
  startPage         Int?
  subtitle          String?
  isPublished       Boolean           @default(false)
  publicationDate   DateTime?
  previewText       String?           @db.LongText
  additionalInfo    String?
  bookImage         String?
  mediaTitle        String?
  articleImage      String?
  beitragssubtyp    Beitragssubtyp?   @relation(fields: [beitragssubtypId], references: [id])
  beitragstyp       Beitragstyp       @relation(fields: [beitragstypId], references: [id])
  edition           Edition?          @relation(fields: [editionId], references: [id])
  articleCategories ArticleCategory[]
  favorites         Favorite[]
  obituaryDetails   ObituaryDetails?
  
  interviewees      Interviewee[]     @relation("ArticleInterviewees")
  regions           Region[]          @relation("ArticleRegions")
  topics            Topic[]           @relation("ArticleTopics")
  authors   Author[]  @relation("ArticleAuthors") // Relación muchos a muchos con autores
  

  @@index([beitragssubtypId], map: "Article_beitragssubtypId_fkey")
  @@index([beitragstypId], map: "Article_beitragstypId_fkey")
  @@index([editionId], map: "Article_editionId_fkey")
}


model Interviewee {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  articles Article[] @relation("ArticleInterviewees")
}

model Edition {
  id                 Int       @id @default(autoincrement())
  drupalId           Int?
  number             Int       @unique
  title              String
  createdAt          DateTime  @default(now())
  datePublished      DateTime  @default(now())
  subtitle           String?
  summary            String    @db.Text
  isCurrent          Boolean   @default(false)
  tableOfContents    String?   @db.Text
  backgroundImage    String?
  coverImage         String?
  isAvailableToOrder Boolean?
  articles           Article[]
  regions            Region[]  @relation("EditionRegions")
  topics             Topic[]   @relation("EditionTopics")
}

model Beitragstyp {
  id       Int              @id @default(autoincrement())
  name     String           @unique
  articles Article[]
  subtypes Beitragssubtyp[]
}

model Region {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  parentId Int?
  parent   Region?   @relation("RegionHierarchy", fields: [parentId], references: [id])
  children Region[]  @relation("RegionHierarchy")
  articles Article[] @relation("ArticleRegions")
  editions Edition[] @relation("EditionRegions")
  authors    Author[]  @relation("AuthorRegions")   // Relación con autores

  @@index([parentId], map: "Region_parentId_fkey")
}

model Topic {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  parentId Int?
  parent   Topic?    @relation("TopicHierarchy", fields: [parentId], references: [id])
  children Topic[]   @relation("TopicHierarchy")
  articles Article[] @relation("ArticleTopics")
  editions Edition[] @relation("EditionTopics")
  authors    Author[]  @relation("AuthorTopics")   // Relación con autores

  @@index([parentId], map: "Topic_parentId_fkey")
}

model Beitragssubtyp {
  id            Int         @id @default(autoincrement())
  name          String
  beitragstypId Int
  articles      Article[]
  beitragstyp   Beitragstyp @relation(fields: [beitragstypId], references: [id])

  @@unique([name, beitragstypId])
  @@index([beitragstypId], map: "Beitragssubtyp_beitragstypId_fkey")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  name      String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  favorites Favorite[]
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  articleId Int
  createdAt DateTime @default(now())
  article   Article  @relation(fields: [articleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, articleId], map: "UniqueUserArticle")
  @@index([articleId], map: "Favorite_articleId_fkey")
}

model Author {
  id         Int       @id @default(autoincrement()) // Volvemos al autoincrement
  drupalId   Int?      @unique // ID original de Drupal, opcional pero unico.
  name      String
  email     String?   @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bio       String?   @db.Text
  location  String?
  role      String?
  articles          Article[]       @relation("ArticleAuthors")   // Relación opuesta con artículos
  personCategoryId Int?            // FK hacia PersonCategory
  personCategory   PersonCategory? @relation("AuthorPersonCategory", fields: [personCategoryId], references: [id]) // Relación con PersonCategory
  regions         Region[]        @relation("AuthorRegions") // Relación con regiones
  topics          Topic[]         @relation("AuthorTopics") // Relación con temas
}
model PersonCategory {
  id       Int      @id @default(autoincrement())
  name     String   @unique // Nombre único para cada categoría
  authors  Author[] @relation("AuthorPersonCategory") // Relación con autores

  @@map("PersonCategory") // Aseguramos el mapeo a la tabla correcta
}

model ObituaryDetails {
  id                Int     @id @default(autoincrement())
  articleId         Int     @unique
  deceasedFirstName String
  deceasedLastName  String
  dateOfBirth       Int
  dateOfDeath       Int
  article           Article @relation(fields: [articleId], references: [id])
}

model Category {
  id                Int               @id @default(autoincrement())
  name              String            @unique
  articleCategories ArticleCategory[]
}

model ArticleCategory {
  articleId  Int
  categoryId Int
  article    Article  @relation(fields: [articleId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([articleId, categoryId])
  @@index([categoryId], map: "ArticleCategory_categoryId_fkey")
}
