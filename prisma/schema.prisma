generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Article {
  id                Int               @id @default(autoincrement())
  title             String
  content           String            @db.LongText
  legacyPath        String?           @unique
  beitragstypId     Int
  beitragssubtypId  Int?
  editionId         Int?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  isInPrintEdition  Boolean           @default(false)
  endPage           Int?
  startPage         Int?
  subtitle          String?
  isPublished       Boolean           @default(false)
  publicationDate   DateTime?
  previewText       String?           @db.LongText
  additionalInfo    String?           @db.Text
  bookImage         String?
  mediaTitle        String?           @db.Text
  articleImage      String?           @db.Text
  beitragsId        Int?
  isTranslatedES    Boolean @default(false) // 游녣 Nuevo para saber si el articulo esta traducido o no al Espanol
  needsReviewES     Boolean           @default(false)
  beitragssubtyp    Beitragssubtyp?   @relation(fields: [beitragssubtypId], references: [id])
  beitragstyp       Beitragstyp       @relation(fields: [beitragstypId], references: [id])
  edition           Edition?          @relation(fields: [editionId], references: [id])
  activityLogs ActivityLog[]



  titleES           String?
  subtitleES        String?
  contentES         String?           @db.LongText
  previewTextES     String?           @db.LongText
  additionalInfoES  String?           @db.Text

  
  
  
  obituaryDetails   ObituaryDetails?
  authors           Author[]          @relation("ArticleAuthors")
  interviewees      Interviewee[]     @relation("ArticleInterviewees")
  regions           Region[]          @relation("ArticleRegions")
  topics            Topic[]           @relation("ArticleTopics")
  categories        Category[]        @relation("ArticleCategories")

   favorites        Favorite[] 

  @@index([beitragssubtypId], map: "Article_beitragssubtypId_fkey")
  @@index([beitragstypId], map: "Article_beitragstypId_fkey")
  @@index([editionId], map: "Article_editionId_fkey")
}

model Interviewee {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  articles Article[] @relation("ArticleInterviewees")
}

model Edition {
  id                 Int       @id @default(autoincrement())
  number             Int       @unique
  title              String
  titleES            String?
  createdAt          DateTime  @default(now())
  datePublished      DateTime  @default(now())
  subtitle           String?
  summary            String    @db.Text
  isCurrent          Boolean   @default(false)
  tableOfContents    String?   @db.Text
  backgroundImage    String?
  coverImage         String?
  isAvailableToOrder Boolean?
  drupalId           Int?
  articles           Article[]
  regions            Region[]  @relation("EditionRegions")
  topics             Topic[]   @relation("EditionTopics")
}

model Beitragstyp {
  id       Int              @id @default(autoincrement())
  name     String           @unique
  nameES   String?
  articles Article[]
  subtypes Beitragssubtyp[]
  carousels Carousel[] // 游대 Relaci칩n inversa
}

model Region {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  nameES   String?
  parentId Int?
  parent   Region?   @relation("RegionHierarchy", fields: [parentId], references: [id])
  children Region[]  @relation("RegionHierarchy")
  articles Article[] @relation("ArticleRegions")
  authors  Author[]  @relation("AuthorRegions")
  editions Edition[] @relation("EditionRegions")
   carousels Carousel[]

  @@index([parentId], map: "Region_parentId_fkey")
}

model Topic {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  nameES   String?
  parentId Int?
  parent   Topic?    @relation("TopicHierarchy", fields: [parentId], references: [id])
  children Topic[]   @relation("TopicHierarchy")
  articles Article[] @relation("ArticleTopics")
  authors  Author[]  @relation("AuthorTopics")
  editions Edition[] @relation("EditionTopics")

  @@index([parentId], map: "Topic_parentId_fkey")
}

model Beitragssubtyp {
  id            Int         @id @default(autoincrement())
  name          String
  beitragstypId Int
  articles      Article[]
  beitragstyp   Beitragstyp @relation(fields: [beitragstypId], references: [id])

  @@unique([name, beitragstypId])
  @@index([beitragstypId], map: "Beitragssubtyp_beitragstypId_fkey")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  password      String 
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          String   @default("user") // 游꿢 Puede ser "user" o "admin"
  favorites     Favorite[]
  language  String   @default("de") // "es" o "de"
  activityLogs ActivityLog[]


 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
  
 

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model InvitationToken {
  id        String   @id @default(cuid())
  email     String   @unique
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
}





model Author {
  id               Int             @id @default(autoincrement())
  name             String          @unique(map: "name")
  email            String?         @unique
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  bio              String?         @db.Text
  location         String?
  role             String?
  personCategoryId Int?
  drupalId         Int?            @unique
  personCategory   PersonCategory? @relation("AuthorPersonCategory", fields: [personCategoryId], references: [id])
  articles         Article[]       @relation("ArticleAuthors")
  regions          Region[]        @relation("AuthorRegions")
  topics           Topic[]         @relation("AuthorTopics")

  @@index([personCategoryId], map: "Author_personCategoryId_fkey")
}

model PersonCategory {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  authors Author[] @relation("AuthorPersonCategory")

  @@map("PersonCategory")
}

model ObituaryDetails {
  id                Int     @id @default(autoincrement())
  articleId         Int     @unique
  deceasedFirstName String
  deceasedLastName  String
  dateOfBirth       Int
  dateOfDeath       Int
  article           Article @relation(fields: [articleId], references: [id])
}

model Category {
  id                Int               @id @default(autoincrement())
  name              String            @unique
  nameES    String?
  articles           Article[]         @relation("ArticleCategories")
}

model Image {
  id            Int      @id @default(autoincrement())
  contentType   String
  contentId     Int
   width         Int?
  height        Int?
  url           String
  title         String?  @db.VarChar(750)
  alt           String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 칈ndice opcional para filtrar r치pidamente por contentType y contentId
  @@index([contentType, contentId])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int

  @@unique([userId, articleId]) // Evita que un usuario marque un mismo art칤culo m치s de una vez
}

model Event {
  id           String   @id @default(uuid())
  title        String
  description  String
  date         DateTime
  location     String
  image        String   // URL del flyer
  createdAt    DateTime @default(now())
}

enum ActivityAction {
  TRANSLATE_ARTICLE
  CREATE_ARTICLE
  UPDATE_ARTICLE
  DELETE_ARTICLE
  CREATE_EDITION
  CREATE_EVENT
  REVIEW_TRANSLATION
  CREATE_CAROUSEL 
   DELETE_CAROUSEL 
}

model ActivityLog {
  id         Int             @id @default(autoincrement())
  userId     String
  user       User            @relation(fields: [userId], references: [id])
  articleId  Int?
  article    Article?        @relation(fields: [articleId], references: [id])
  action     ActivityAction
  createdAt  DateTime        @default(now())
  carouselId  String? 
carousel    Carousel? @relation("CarouselToActivityLogs", fields: [carouselId], references: [id], onDelete: SetNull)
  metadata Json?

  @@index([userId])
  @@index([articleId])
   @@index([carouselId]) 
}

model Carousel {
  id             String   @id @default(cuid())
  title          String
  titleES        String?
  titleDE        String?
 beitragstypId  Int?           
  beitragstyp    Beitragstyp?   @relation(fields: [beitragstypId], references: [id])
  
  
  topic          String?         // tambi칠n opcional
  regionId       Int?      // 游녤 NUEVO campo
  region         Region?   @relation(fields: [regionId], references: [id]) // 游녤 RELACI칍N REAL        
  category       String?
  limit          Int      @default(10)
  orderBy        String   @default("date_desc") // o "date_asc", "title", etc.
   position     Int       @default(0) 
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  activityLogs ActivityLog[] @relation("CarouselToActivityLogs")
}

