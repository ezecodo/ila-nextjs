generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Article {
  id               Int             @id @default(autoincrement())
  title            String          // Título del artículo
  subtitle         String?         // Subtítulo del artículo
  content          String          @db.Text // Cambiar de String a Text
  beitragstypId    Int             // Relación con el tipo de artículo
  beitragssubtypId Int?            // Relación opcional con el subtipo
  editionId        Int?            // Relación opcional con la edición de la revista
  isInPrintEdition Boolean         @default(false) // Si aparece en versión impresa
  startPage        Int?            // Página donde comienza el artículo en la revista
  endPage          Int?            // Página donde termina el artículo en la revista
  createdAt        DateTime        @default(now())      // Fecha de creación
  updatedAt        DateTime        @updatedAt           // Fecha de actualización automática

  beitragstyp      Beitragstyp     @relation(fields: [beitragstypId], references: [id])
  beitragssubtyp   Beitragssubtyp? @relation(fields: [beitragssubtypId], references: [id])
  edition          Edition?        @relation(fields: [editionId], references: [id]) // Relación con Edition
  favorites        Favorite[]      // Relación con favoritos
  authors          Author[]        @relation("ArticleAuthors") // Relación muchos a muchos con autores
  

  @@index([beitragssubtypId], map: "Article_beitragssubtypId_fkey")
  @@index([beitragstypId], map: "Article_beitragstypId_fkey")
  @@index([editionId], map: "Article_editionId_fkey") // Índice para la edición
}


model Edition {
  id              Int              @id @default(autoincrement())
  number          Int              @unique // Número único de la edición
  title           String           // Título de la edición
  datePublished   DateTime?        // Fecha de publicación opcional
  articles        Article[]        // Relación con artículos
}


model Beitragstyp {
  id       Int              @id @default(autoincrement())
  name     String           @unique
  articles Article[]
  subtypes Beitragssubtyp[]
}

model Beitragssubtyp {
  id            Int          @id @default(autoincrement())
  name          String
  beitragstypId Int
  beitragstyp   Beitragstyp  @relation(fields: [beitragstypId], references: [id])
  articles      Article[]

  @@unique([name, beitragstypId]) // Índice compuesto
}

model User {
  id         Int        @id @default(autoincrement())
  email      String     @unique // Correo único para cada usuario
  name       String?    // Nombre opcional
  favorites  Favorite[] // Relación con favoritos
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int      // Usuario que favoritiza el artículo
  articleId Int      // Artículo que se favoritiza
  user      User     @relation(fields: [userId], references: [id])
  article   Article  @relation(fields: [articleId], references: [id])
  createdAt DateTime @default(now()) // Fecha de creación del favorito

  @@unique([userId, articleId], map: "UniqueUserArticle") // Garantiza que un usuario no pueda repetir un favorito
}

model Author {
  id        Int       @id @default(autoincrement())
  name      String    // Nombre del autor
  email     String?   @unique // Opcional, para evitar duplicados
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  articles  Article[] @relation("ArticleAuthors") // Relación muchos a muchos con artículos
}
